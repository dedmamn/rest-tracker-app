import React, { useState, useEffect } from 'react';
import { Box, Button, Alert, Snackbar, Typography, Card, CardContent, Chip } from '@mui/material';
import { Download, Wifi, WifiOff, Apple, Android, PhoneIphone, Share } from '@mui/icons-material';

interface BeforeInstallPromptEvent extends Event {
  prompt(): Promise<void>;
  userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –±—Ä–∞—É–∑–µ—Ä–∞
const getDeviceInfo = () => {
  const userAgent = navigator.userAgent;
  const isIOS = /iPad|iPhone|iPod/.test(userAgent);
  const isAndroid = /Android/.test(userAgent);
  const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
  const isChrome = /Chrome/.test(userAgent);
  const isFirefox = /Firefox/.test(userAgent);
  const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
  
  return {
    isIOS,
    isAndroid,
    isSafari,
    isChrome,
    isFirefox,
    isStandalone,
    isMobile: isIOS || isAndroid
  };
};

const PWAInstall: React.FC = () => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [isInstallable, setIsInstallable] = useState(false);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [showOfflineAlert, setShowOfflineAlert] = useState(false);
  const [updateAvailable, setUpdateAvailable] = useState(false);
  const [showIOSInstructions, setShowIOSInstructions] = useState(false);
  const [deviceInfo] = useState(getDeviceInfo());

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
      setIsInstallable(true);
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
    const handleOnlineStatusChange = () => {
      const online = navigator.onLine;
      setIsOnline(online);
      if (!online) {
        setShowOfflineAlert(true);
      }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Service Worker
    const handleServiceWorkerUpdate = () => {
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.addEventListener('controllerchange', () => {
          setUpdateAvailable(true);
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        navigator.serviceWorker.ready.then((registration) => {
          registration.addEventListener('updatefound', () => {
            const newWorker = registration.installing;
            if (newWorker) {
              newWorker.addEventListener('statechange', () => {
                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                  setUpdateAvailable(true);
                }
              });
            }
          });
        });
      }
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('online', handleOnlineStatusChange);
    window.addEventListener('offline', handleOnlineStatusChange);
    
    handleServiceWorkerUpdate();

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('online', handleOnlineStatusChange);
      window.removeEventListener('offline', handleOnlineStatusChange);
    };
  }, []);

  const handleInstallClick = async () => {
    if (!deferredPrompt) return;

    deferredPrompt.prompt();
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      console.log('PWA —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWA –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞');
    }
    
    setDeferredPrompt(null);
    setIsInstallable(false);
  };

  const handleUpdateClick = () => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then((registration) => {
        if (registration.waiting) {
          registration.waiting.postMessage({ type: 'SKIP_WAITING' });
        }
      });
    }
    window.location.reload();
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
  const shouldShowMobileInstructions = () => {
    // –ï—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–∫ PWA
    if (deviceInfo.isStandalone) return false;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Ç–∏–≤–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (Android Chrome)
    if (isInstallable) return false;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iOS Safari –∏ –¥—Ä—É–≥–∏—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
    return deviceInfo.isMobile;
  };

  const getInstallInstructions = () => {
    if (deviceInfo.isIOS && deviceInfo.isSafari) {
      return {
        title: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ iPhone/iPad',
        icon: <Apple />,
        steps: [
          '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞',
          '–í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω "–î–æ–º–æ–π""',
          '–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É'
        ],
        buttonText: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è',
        buttonIcon: <Share />
      };
    } else if (deviceInfo.isAndroid) {
      return {
        title: '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ Android',
        icon: <Android />,
        steps: [
          '–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞ (‚ãÆ)',
          '–í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"',
          '–ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –∏–ª–∏ "–î–æ–±–∞–≤–∏—Ç—å"'
        ],
        buttonText: '–ú–µ–Ω—é –±—Ä–∞—É–∑–µ—Ä–∞',
        buttonIcon: <PhoneIphone />
      };
    }
    return null;
  };

  const instructions = getInstallInstructions();

  return (
    <Box>
      {/* –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ */}
      {deviceInfo.isStandalone && (
        <Alert severity="success" sx={{ mb: 2 }}>
          <Typography variant="body2">
            üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!
          </Typography>
        </Alert>
      )}

      {/* –ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤) */}
      {isInstallable && (
        <Button
          variant="contained"
          color="primary"
          startIcon={<Download />}
          onClick={handleInstallClick}
          fullWidth
          sx={{ mb: 2, py: 1.5 }}
        >
          –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        </Button>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */}
      {shouldShowMobileInstructions() && instructions && (
        <Card sx={{ mb: 2, bgcolor: 'primary.50' }}>
          <CardContent>
            <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
              {instructions.icon}
              <Typography variant="h6" sx={{ ml: 1, color: 'primary.main' }}>
                {instructions.title}
              </Typography>
            </Box>
            
            <Typography variant="body2" sx={{ mb: 2, color: 'text.secondary' }}>
              –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞:
            </Typography>
            
            <Box component="ol" sx={{ pl: 2, m: 0 }}>
              {instructions.steps.map((step, index) => (
                <Box component="li" key={index} sx={{ mb: 1 }}>
                  <Typography variant="body2">{step}</Typography>
                </Box>
              ))}
            </Box>

            {deviceInfo.isIOS && (
              <Box sx={{ mt: 2 }}>
                <Chip 
                  icon={<Share />} 
                  label="–ù–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è"
                  size="small"
                  variant="outlined"
                  color="primary"
                />
              </Box>
            )}
          </CardContent>
        </Card>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (—Ç–æ–ª—å–∫–æ –≤ development) */}
      {process.env.NODE_ENV === 'development' && (
        <Card sx={{ mb: 2, bgcolor: 'grey.50' }}>
          <CardContent>
            <Typography variant="subtitle2" gutterBottom>
              –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:
            </Typography>
            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
              {deviceInfo.isIOS && <Chip label="iOS" size="small" />}
              {deviceInfo.isAndroid && <Chip label="Android" size="small" />}
              {deviceInfo.isSafari && <Chip label="Safari" size="small" />}
              {deviceInfo.isChrome && <Chip label="Chrome" size="small" />}
              {deviceInfo.isStandalone && <Chip label="PWA Mode" size="small" color="success" />}
              {isInstallable && <Chip label="Installable" size="small" color="primary" />}
            </Box>
          </CardContent>
        </Card>
      )}

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏ */}
      <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
        {isOnline ? (
          <Wifi color="success" sx={{ mr: 1 }} />
        ) : (
          <WifiOff color="error" sx={{ mr: 1 }} />
        )}
        <Typography variant="body2" color={isOnline ? 'success.main' : 'error.main'}>
          {isOnline ? '–í —Å–µ—Ç–∏' : '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º'}
        </Typography>
      </Box>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ */}
      <Snackbar
        open={showOfflineAlert && !isOnline}
        autoHideDuration={6000}
        onClose={() => setShowOfflineAlert(false)}
      >
        <Alert severity="info" onClose={() => setShowOfflineAlert(false)}>
          –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.
        </Alert>
      </Snackbar>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
      <Snackbar
        open={updateAvailable}
        onClose={() => setUpdateAvailable(false)}
      >
        <Alert 
          severity="info" 
          action={
            <Button color="inherit" size="small" onClick={handleUpdateClick}>
              –û–±–Ω–æ–≤–∏—Ç—å
            </Button>
          }
        >
          –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default PWAInstall;
