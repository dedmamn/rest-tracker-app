// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∏ PWA
import { ActivityType } from '../types';
import { PREDEFINED_ACTIVITIES } from '../data/predefinedActivities';

export const formatDate = (date: Date): string => {
    return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
    });
};

export const validateActivityInput = (name: string, description: string): boolean => {
    return name.trim().length > 0 && description.trim().length > 0;
};

export const getActivityTypeByName = (activityName: string): ActivityType => {
    // –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö
    for (const [type, activities] of Object.entries(PREDEFINED_ACTIVITIES)) {
        if (activities.some(activity => activity.name === activityName)) {
            return type as ActivityType;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return ActivityType.PASSIVE;
};

export const generateRecurrenceOptions = (frequency: string): string[] => {
    const options = [];
    if (frequency === 'daily') {
        options.push('–ö–∞–∂–¥—ã–π –¥–µ–Ω—å');
    } else if (frequency === 'weekly') {
        options.push('–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é');
    } else if (frequency === 'monthly') {
        options.push('–ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü');
    }
    return options;
};

export class NotificationManager {
    // –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    private static notificationIntervals: { [key: string]: number } = {};

    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    static async requestPermission(): Promise<boolean> {
        if (!('Notification' in window)) {
            console.log('–≠—Ç–æ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return false;
        }

        if (Notification.permission === 'granted') {
            return true;
        }

        if (Notification.permission !== 'denied') {
            const permission = await Notification.requestPermission();
            return permission === 'granted';
        }

        return false;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    static async sendNotification(title: string, options?: NotificationOptions): Promise<void> {
        const hasPermission = await this.requestPermission();
        
        if (hasPermission) {
            const notification = new Notification(title, {
                icon: '/favicon.ico',
                badge: '/favicon.ico',
                ...options
            });

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                notification.close();
            }, 5000);
        }
    }

    // –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    static async sendActivityReminder(activityTitle: string): Promise<void> {
        await this.sendNotification(
            '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –æ—Ç–¥—ã—Ö–µ',
            {
                body: `–í—Ä–µ–º—è –¥–ª—è: ${activityTitle}`,
                tag: 'activity-reminder'
            }
        );
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    static async sendBackupReminder(): Promise<void> {
        await this.sendNotification(
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é',
            {
                body: '–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                tag: 'backup-reminder'
            }
        );
    }

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    static scheduleDaily(reminderTime: string): void {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        this.clearScheduled();

        if (!reminderTime) return;

        const [hours, minutes] = reminderTime.split(':').map(Number);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const getNextReminderTime = (): number => {
            const now = new Date();
            const reminderDate = new Date();
            reminderDate.setHours(hours, minutes, 0, 0);

            // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if (reminderDate <= now) {
                reminderDate.setDate(reminderDate.getDate() + 1);
            }

            return reminderDate.getTime() - now.getTime();
        };

        // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        const sendReminder = () => {
            this.sendDailyReminder();
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
            this.notificationIntervals['daily'] = window.setTimeout(() => {
                sendReminder();
            }, 24 * 60 * 60 * 1000);
        };

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        this.notificationIntervals['daily'] = window.setTimeout(() => {
            sendReminder();
        }, getNextReminderTime());

        console.log(`üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ ${reminderTime}`);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    static async sendDailyReminder(): Promise<void> {
        const hasPermission = await this.requestPermission();
        if (!hasPermission) return;

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ localStorage
        try {
            const data = localStorage.getItem('rest-tracker-data');
            if (!data) return;

            const appData = JSON.parse(data);
            const activeActivities = appData.activities?.filter((activity: any) => activity.isActive) || [];

            if (activeActivities.length === 0) {
                await this.sendNotification(
                    '–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!',
                    {
                        body: '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ —Å–µ–≥–æ–¥–Ω—è',
                        tag: 'daily-reminder',
                        requireInteraction: true
                    }
                );
            } else {
                const randomActivity = activeActivities[Math.floor(Math.random() * activeActivities.length)];
                await this.sendNotification(
                    '–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!',
                    {
                        body: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${randomActivity.name}`,
                        tag: 'daily-reminder',
                        requireInteraction: true
                    }
                );
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    static clearScheduled(): void {
        Object.values(this.notificationIntervals).forEach(intervalId => {
            if (intervalId) {
                clearTimeout(intervalId);
            }
        });
        this.notificationIntervals = {};
        console.log('üßπ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    static getNotificationStatus(): { 
        permission: NotificationPermission;
        scheduled: boolean;
        nextReminder?: string;
        activeReminders: string[];
    } {
        const hasScheduled = Object.keys(this.notificationIntervals).length > 0;
        const activeReminders = Object.keys(this.notificationIntervals);
        
        return {
            permission: Notification.permission,
            scheduled: hasScheduled,
            activeReminders
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    static getNextReminderInfo(reminderTime: string): { 
        nextReminder: string;
        timeUntilNext: number;
    } | null {
        if (!reminderTime) return null;

        const [hours, minutes] = reminderTime.split(':').map(Number);
        const now = new Date();
        const reminderDate = new Date();
        reminderDate.setHours(hours, minutes, 0, 0);

        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if (reminderDate <= now) {
            reminderDate.setDate(reminderDate.getDate() + 1);
        }

        const timeUntilNext = reminderDate.getTime() - now.getTime();
        
        return {
            nextReminder: reminderDate.toLocaleString('ru-RU'),
            timeUntilNext
        };
    }
}

export class PWAManager {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ PWA
    static isPWA(): boolean {
        return window.matchMedia('(display-mode: standalone)').matches ||
               (window.navigator as any).standalone === true ||
               document.referrer.includes('android-app://');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Service Worker
    static isServiceWorkerSupported(): boolean {
        return 'serviceWorker' in navigator;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    static async registerServiceWorker(): Promise<ServiceWorkerRegistration | null> {
        if (!this.isServiceWorkerSupported()) {
            console.log('Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return null;
        }

        try {
            const registration = await navigator.serviceWorker.register('/sw.js');
            console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
            return registration;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
            return null;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    static canInstall(): boolean {
        return 'beforeinstallprompt' in window;
    }
}

export class DataFormatter {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    static formatBytes(bytes: number): string {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    static formatDateRelative(date: Date | string): string {
        const d = typeof date === 'string' ? new Date(date) : date;
        const now = new Date();
        const diffTime = now.getTime() - d.getTime();
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

        if (diffDays === 0) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (diffDays === 1) {
            return '–í—á–µ—Ä–∞';
        } else if (diffDays < 7) {
            return `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
        } else {
            return d.toLocaleDateString('ru-RU');
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    static formatDuration(minutes: number): string {
        if (minutes < 60) {
            return `${minutes} –º–∏–Ω`;
        } else {
            const hours = Math.floor(minutes / 60);
            const remainingMinutes = minutes % 60;
            return remainingMinutes > 0 ? `${hours}—á ${remainingMinutes}–º` : `${hours}—á`;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    static getGreeting(): string {
        const hour = new Date().getHours();
        if (hour < 6) return '–î–æ–±—Ä–æ–π –Ω–æ—á–∏';
        if (hour < 12) return '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ';
        if (hour < 18) return '–î–æ–±—Ä—ã–π –¥–µ–Ω—å';
        return '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä';
    }
}