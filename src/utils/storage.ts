import { Activity, Settings } from '../types';

export interface AppData {
    activities: Activity[];
    settings: Settings;
    version: string;
    lastBackup: string;
}

const STORAGE_KEY = 'rest-tracker-data';
const BACKUP_KEY = 'rest-tracker-backup';
const VERSION = '1.0.0';

export class StorageManager {
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    static saveData(activities: Activity[], settings: Settings): void {
        const data: AppData = {
            activities: this.serializeActivities(activities),
            settings,
            version: VERSION,
            lastBackup: new Date().toISOString()
        };

        try {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', { 
                activities: activities.length, 
                settings: settings.theme,
                key: STORAGE_KEY 
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    static loadData(): { activities: Activity[]; settings: Settings } | null {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª—é—á–∞
            let dataString = localStorage.getItem(STORAGE_KEY);
            
            // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ backup
            if (!dataString) {
                console.log('üîÑ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º backup...');
                const backupData = this.loadBackup();
                if (backupData) {
                    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ backup');
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
                    this.saveData(backupData.activities, backupData.settings);
                    return backupData;
                }
                return null;
            }

            const data: AppData = JSON.parse(dataString);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if (data.version !== VERSION) {
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è...');
                const migratedData = this.migrateData(data);
                this.saveData(migratedData.activities, migratedData.settings);
                return migratedData;
            }

            const result = {
                activities: this.deserializeActivities(data.activities || []),
                settings: data.settings || this.getDefaultSettings()
            };

            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { 
                activities: result.activities.length,
                settings: result.settings.theme,
                key: STORAGE_KEY
            });

            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            const backupData = this.loadBackup();
            if (backupData) {
                console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ backup –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏');
                return backupData;
            }
            return null;
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    static createBackup(activities: Activity[], settings: Settings): void {
        const backupData: AppData = {
            activities: this.serializeActivities(activities),
            settings,
            version: VERSION,
            lastBackup: new Date().toISOString()
        };

        try {
            localStorage.setItem(BACKUP_KEY, JSON.stringify(backupData));
            console.log('üóÑÔ∏è –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
        }
    }

    // –£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (—Ä–∞–∑ –≤ –¥–µ–Ω—å –≤–µ—á–µ—Ä–æ–º)
    static createSmartBackup(activities: Activity[], settings: Settings): void {
        const now = new Date();
        const hour = now.getHours();
        
        // Backup —Ç–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–º (22:00-23:59)
        if (hour < 22) {
            return;
        }

        const lastBackupTime = localStorage.getItem('lastBackupTime');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –±–æ–ª—å—à–µ 20 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ backup
        if (lastBackupTime) {
            const timeDiff = now.getTime() - new Date(lastBackupTime).getTime();
            const hoursDiff = timeDiff / (1000 * 60 * 60);
            
            if (hoursDiff < 20) {
                return; // –ï—â–µ —Ä–∞–Ω–æ –¥–ª—è backup
            }
        }

        // –°–æ–∑–¥–∞–µ–º backup
        this.createBackup(activities, settings);
        localStorage.setItem('lastBackupTime', now.toISOString());
        console.log('üåô –°–æ–∑–¥–∞–Ω –≤–µ—á–µ—Ä–Ω–∏–π backup');
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    static loadBackup(): { activities: Activity[]; settings: Settings } | null {
        try {
            const backupString = localStorage.getItem(BACKUP_KEY);
            if (!backupString) {
                console.log('üîç Backup –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return null;
            }

            const backup: AppData = JSON.parse(backupString);
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            
            return {
                activities: this.deserializeActivities(backup.activities || []),
                settings: backup.settings || this.getDefaultSettings()
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            return null;
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON
    static exportData(activities: Activity[], settings: Settings): string {
        const exportData: AppData = {
            activities,
            settings,
            version: VERSION,
            lastBackup: new Date().toISOString()
        };

        return JSON.stringify(exportData, null, 2);
    }

    // –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
    static importData(jsonString: string): { activities: Activity[]; settings: Settings } {
        try {
            const importedData: AppData = JSON.parse(jsonString);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            if (!this.validateImportedData(importedData)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }

            // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if (importedData.version !== VERSION) {
                return this.migrateData(importedData);
            }

            return {
                activities: importedData.activities || [],
                settings: importedData.settings || this.getDefaultSettings()
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
        }
    }

    // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Date –≤ —Å—Ç—Ä–æ–∫–∏)
    private static serializeActivities(activities: Activity[]): any[] {
        return activities.map(activity => ({
            ...activity,
            createdAt: activity.createdAt.toISOString(),
            completedDates: activity.completedDates.map(date => date.toISOString()),
            recurrence: activity.recurrence ? {
                ...activity.recurrence,
                endDate: activity.recurrence.endDate ? activity.recurrence.endDate.toISOString() : undefined
            } : undefined
        }));
    }

    // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ Date)
    private static deserializeActivities(activities: any[]): Activity[] {
        return activities.map(activity => ({
            ...activity,
            createdAt: new Date(activity.createdAt),
            completedDates: activity.completedDates ? 
                activity.completedDates.map((dateStr: string) => new Date(dateStr)) : [],
            recurrence: activity.recurrence ? {
                ...activity.recurrence,
                endDate: activity.recurrence.endDate ? new Date(activity.recurrence.endDate) : undefined
            } : undefined
        }));
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private static validateImportedData(data: any): boolean {
        if (!data || typeof data !== 'object') {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã activities
        if (data.activities && Array.isArray(data.activities)) {
            for (const activity of data.activities) {
                if (!activity.id || !activity.name || !activity.type) {
                    return false;
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã settings
        if (data.settings && typeof data.settings === 'object') {
            const requiredSettingsFields = ['theme', 'notificationsEnabled'];
            for (const field of requiredSettingsFields) {
                if (!(field in data.settings)) {
                    return false;
                }
            }
        }

        return true;
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
    private static migrateData(oldData: any): { activities: Activity[]; settings: Settings } {
        // –ú–∏–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π (–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç)
        const activities = oldData.activities ? 
            this.deserializeActivities(oldData.activities) : [];

        return {
            activities,
            settings: { ...this.getDefaultSettings(), ...oldData.settings }
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private static getDefaultSettings(): Settings {
        return {
            notificationsEnabled: true,
            theme: 'light',
            defaultActivityDuration: 30,
            reminderTime: '09:00'
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    static clearAllData(): void {
        localStorage.removeItem(STORAGE_KEY);
        localStorage.removeItem(BACKUP_KEY);
        console.log('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–º–µ—Ä–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    static getStorageInfo(): { used: number; total: number; percentage: number } {
        let used = 0;
        for (let key in localStorage) {
            if (localStorage.hasOwnProperty(key)) {
                used += localStorage[key].length;
            }
        }

        // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç localStorage (5MB –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±—Ä–∞—É–∑–µ—Ä–æ–≤)
        const total = 5 * 1024 * 1024;
        const percentage = (used / total) * 100;

        return { used, total, percentage };
    }
}
