import React, { useState } from 'react';
import {
    Box,
    Typography,
    Card,
    CardContent,
    FormControlLabel,
    Switch,
    TextField,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Button,
    Divider,
    Alert,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    List,
    ListItem,
    ListItemIcon,
    ListItemText,
    Slider,
    AppBar,
    Toolbar,
    LinearProgress,
    Chip
} from '@mui/material';
import {
    Notifications,
    DarkMode,
    Schedule,
    DataUsage,
    CloudDownload,
    CloudUpload,
    DeleteForever,
    Info,
    Storage,
    Backup,
    Psychology,
    History,
    CheckCircle
} from '@mui/icons-material';
import { Settings as SettingsType, Activity, TestResult } from '../types';
import { StorageManager } from '../utils/storage';
import { DataFormatter, NotificationManager } from '../utils/helpers';
import { formatTestDate } from '../utils/testUtils';
import PWAInstall from '../components/PWAInstall';

interface SettingsProps {
    settings: SettingsType;
    setSettings: React.Dispatch<React.SetStateAction<SettingsType>>;
    activities?: Activity[];
    setActivities?: React.Dispatch<React.SetStateAction<Activity[]>>;
    testHistory?: TestResult[];
    onOpenTest?: () => void;
    onOpenTestResult?: (result: TestResult) => void;
}

const Settings: React.FC<SettingsProps> = ({ 
    settings, 
    setSettings, 
    activities = [], 
    setActivities,
    testHistory = [],
    onOpenTest,
    onOpenTestResult
}) => {
    const [exportDialogOpen, setExportDialogOpen] = useState(false);
    const [importDialogOpen, setImportDialogOpen] = useState(false);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [importData, setImportData] = useState('');
    const [alertMessage, setAlertMessage] = useState<{ type: 'success' | 'error', message: string } | null>(null);
    const [storageInfo, setStorageInfo] = useState(StorageManager.getStorageInfo());

    const handleSettingChange = (key: keyof SettingsType, value: any) => {
        setSettings(prev => ({
            ...prev,
            [key]: value
        }));
    };

    const handleExportData = () => {
        try {
            const exportString = StorageManager.exportData(activities, settings);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(exportString);
            
            const exportFileDefaultName = `rest-tracker-backup-${new Date().toISOString().split('T')[0]}.json`;
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            setExportDialogOpen(false);
            setAlertMessage({ type: 'success', message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!' });
        } catch (error) {
            setAlertMessage({ type: 'error', message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö' });
        }
    };

    const handleImportData = () => {
        try {
            const importedData = StorageManager.importData(importData);
            
            if (setActivities) {
                setActivities(importedData.activities);
            }
            setSettings(importedData.settings);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            StorageManager.saveData(importedData.activities, importedData.settings);
            
            setImportDialogOpen(false);
            setImportData('');
            setStorageInfo(StorageManager.getStorageInfo());
            setAlertMessage({ type: 'success', message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!' });
        } catch (error) {
            setAlertMessage({ type: 'error', message: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' });
        }
    };

    const handleDeleteAllData = () => {
        StorageManager.clearAllData();
        if (setActivities) {
            setActivities([]);
        }
        setSettings({
            notificationsEnabled: true,
            theme: 'light',
            defaultActivityDuration: 30,
            reminderTime: '09:00',
            testSettings: {
                hasCompletedFirstTest: false,
                showTestReminderPopup: true,
                testHistory: []
            }
        });
        setDeleteDialogOpen(false);
        setStorageInfo(StorageManager.getStorageInfo());
        setAlertMessage({ type: 'success', message: '–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã!' });
    };

    const handleCreateBackup = () => {
        try {
            StorageManager.createBackup(activities, settings);
            setAlertMessage({ type: 'success', message: '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!' });
        } catch (error) {
            setAlertMessage({ type: 'error', message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏' });
        }
    };

    const formatBytes = (bytes: number): string => {
        return DataFormatter.formatBytes(bytes);
    };

    const handleNotificationToggle = async (enabled: boolean) => {
        if (enabled) {
            const hasPermission = await NotificationManager.requestPermission();
            if (!hasPermission) {
                setAlertMessage({ 
                    type: 'error', 
                    message: '–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞.' 
                });
                return;
            }
        }
        handleSettingChange('notificationsEnabled', enabled);
    };

    const formatTime = (timeString: string) => {
        if (!timeString) return '';
        const [hours, minutes] = timeString.split(':');
        return `${hours}:${minutes}`;
    };

    const handleTestNotification = async () => {
        try {
            await NotificationManager.sendDailyReminder();
            setAlertMessage({ 
                type: 'success', 
                message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!' 
            });
        } catch (error) {
            setAlertMessage({ 
                type: 'error', 
                message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.' 
            });
        }
    };

    const handleCheckNotificationStatus = () => {
        const status = NotificationManager.getNotificationStatus();
        const nextInfo = settings.reminderTime 
            ? NotificationManager.getNextReminderInfo(settings.reminderTime)
            : null;
        
        let message = '';
        
        switch (status.permission) {
            case 'granted':
                if (status.scheduled && nextInfo) {
                    const hoursUntil = Math.round(nextInfo.timeUntilNext / (1000 * 60 * 60));
                    message = `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ ${settings.reminderTime}. –°–ª–µ–¥—É—é—â–µ–µ —á–µ—Ä–µ–∑ ~${hoursUntil}—á`;
                } else {
                    message = '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, –Ω–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.';
                }
                break;
            case 'denied':
                message = '‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
                break;
            case 'default':
                message = '‚ö†Ô∏è –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ. –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.';
                break;
        }
        
        console.log('üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', status, nextInfo);
        
        setAlertMessage({ 
            type: status.permission === 'granted' ? 'success' : 'error', 
            message 
        });
    };

    return (
        <Box sx={{ pb: 10 }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <AppBar 
                position="sticky" 
                color="transparent" 
                elevation={0}
                sx={{ 
                    backdropFilter: 'blur(8px)',
                    backgroundColor: (theme) => theme.palette.mode === 'dark' 
                        ? 'rgba(18, 18, 18, 0.9)' 
                        : 'rgba(255, 255, 255, 0.9)',
                    borderBottom: (theme) => `1px solid ${theme.palette.divider}`
                }}
            >
                <Toolbar>
                    <Typography variant="h5" component="h1" sx={{ fontWeight: 700, color: 'text.primary' }}>
                        –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    </Typography>
                </Toolbar>
            </AppBar>

            <Box sx={{ p: 2 }}>
                {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                {alertMessage && (
                    <Alert 
                        severity={alertMessage.type} 
                        onClose={() => setAlertMessage(null)}
                        sx={{ mb: 2 }}
                    >
                        {alertMessage.message}
                    </Alert>
                )}

                {/* –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                <Card sx={{ mb: 2 }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Notifications color="primary" />
                            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        </Typography>
                        
                        <FormControlLabel
                            control={
                                <Switch 
                                    checked={settings.notificationsEnabled}
                                    onChange={(e) => handleNotificationToggle(e.target.checked)}
                                />
                            }
                            label="–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                            sx={{ mb: 2 }}
                        />
                        
                        {settings.notificationsEnabled && (
                            <>
                                <TextField
                                    label="–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
                                    type="time"
                                    value={settings.reminderTime || '09:00'}
                                    onChange={(e) => handleSettingChange('reminderTime', e.target.value)}
                                    fullWidth
                                    InputLabelProps={{ shrink: true }}
                                    helperText="–í—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö"
                                    sx={{ mb: 2 }}
                                />
                                
                                <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                                    <Button
                                        size="small"
                                        variant="outlined"
                                        onClick={handleTestNotification}
                                        startIcon={<Notifications />}
                                    >
                                        –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                                    </Button>
                                    
                                    <Button
                                        size="small"
                                        variant="outlined"
                                        onClick={handleCheckNotificationStatus}
                                        startIcon={<Info />}
                                    >
                                        –°—Ç–∞—Ç—É—Å
                                    </Button>
                                </Box>
                            </>
                        )}
                    </CardContent>
                </Card>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
                <Card sx={{ mb: 2 }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            <DarkMode color="primary" />
                            –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                        </Typography>
                        
                        <FormControl fullWidth sx={{ mb: 2 }}>
                            <InputLabel>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</InputLabel>
                            <Select
                                value={settings.theme}
                                onChange={(e) => handleSettingChange('theme', e.target.value)}
                                label="–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"
                            >
                                <MenuItem value="light">–°–≤–µ—Ç–ª–∞—è</MenuItem>
                                <MenuItem value="dark">–¢—ë–º–Ω–∞—è</MenuItem>
                            </Select>
                        </FormControl>
                    </CardContent>
                </Card>

                {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π */}
                <Card sx={{ mb: 2 }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Schedule color="primary" />
                            –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        </Typography>
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.defaultActivityDuration} –º–∏–Ω—É—Ç
                        </Typography>
                        <Slider
                            value={settings.defaultActivityDuration}
                            onChange={(_, value) => handleSettingChange('defaultActivityDuration', value)}
                            min={5}
                            max={120}
                            step={5}
                            marks={[
                                { value: 15, label: '15 –º–∏–Ω' },
                                { value: 30, label: '30 –º–∏–Ω' },
                                { value: 60, label: '1 —á–∞—Å' },
                                { value: 120, label: '2 —á–∞—Å–∞' }
                            ]}
                            valueLabelDisplay="auto"
                            sx={{ mt: 2 }}
                        />
                    </CardContent>
                </Card>

                {/* –î–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ */}
                <Card sx={{ mb: 2 }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            <DataUsage color="primary" />
                            –î–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                        </Typography>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ */}
                        <Box sx={{ mb: 3 }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, display: 'flex', alignItems: 'center', gap: 1 }}>
                                <Storage fontSize="small" />
                                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                            </Typography>
                            <LinearProgress 
                                variant="determinate" 
                                value={Math.min(storageInfo.percentage, 100)} 
                                sx={{ mb: 1, height: 8, borderRadius: 4 }}
                                color={storageInfo.percentage > 80 ? 'error' : storageInfo.percentage > 60 ? 'warning' : 'primary'}
                            />
                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                                <Typography variant="caption">
                                    {formatBytes(storageInfo.used)} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                                </Typography>
                                <Typography variant="caption">
                                    {formatBytes(storageInfo.total)} –≤—Å–µ–≥–æ
                                </Typography>
                            </Box>
                            <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                                <Chip 
                                    label={`${activities.length} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π`} 
                                    size="small" 
                                    color="primary" 
                                    variant="outlined" 
                                />
                                <Chip 
                                    label={`${storageInfo.percentage.toFixed(1)}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ`} 
                                    size="small" 
                                    color={storageInfo.percentage > 80 ? 'error' : 'default'}
                                    variant="outlined" 
                                />
                            </Box>
                        </Box>
                        
                        <List disablePadding>
                            <ListItem 
                                button 
                                onClick={handleCreateBackup}
                                sx={{ borderRadius: 1, mb: 1 }}
                            >
                                <ListItemIcon>
                                    <Backup color="primary" />
                                </ListItemIcon>
                                <ListItemText 
                                    primary="–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
                                    secondary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ"
                                />
                            </ListItem>

                            <ListItem 
                                button 
                                onClick={() => setExportDialogOpen(true)}
                                sx={{ borderRadius: 1, mb: 1 }}
                            >
                                <ListItemIcon>
                                    <CloudDownload color="success" />
                                </ListItemIcon>
                                <ListItemText 
                                    primary="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    secondary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª"
                                />
                            </ListItem>
                            
                            <ListItem 
                                button 
                                onClick={() => setImportDialogOpen(true)}
                                sx={{ borderRadius: 1, mb: 1 }}
                            >
                                <ListItemIcon>
                                    <CloudUpload color="info" />
                                </ListItemIcon>
                                <ListItemText 
                                    primary="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
                                    secondary="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞"
                                />
                            </ListItem>
                            
                            <Divider sx={{ my: 1 }} />
                            
                            <ListItem 
                                button 
                                onClick={() => setDeleteDialogOpen(true)}
                                sx={{ borderRadius: 1 }}
                            >
                                <ListItemIcon>
                                    <DeleteForever color="error" />
                                </ListItemIcon>
                                <ListItemText 
                                    primary="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
                                    secondary="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                                />
                            </ListItem>
                        </List>
                    </CardContent>
                </Card>

                {/* –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å */}
                {testHistory && testHistory.length > 0 && (
                    <Card sx={{ mb: 2 }}>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                                <Psychology color="primary" />
                                –ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —É—Å—Ç–∞–ª–æ—Å—Ç—å
                            </Typography>

                            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                                –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {testHistory.length}
                            </Typography>

                            <List>
                                {onOpenTest && (
                                    <ListItem 
                                        button 
                                        onClick={onOpenTest}
                                        sx={{ 
                                            borderRadius: 2, 
                                            mb: 1,
                                            bgcolor: 'primary.light',
                                            '&:hover': { bgcolor: 'primary.main' }
                                        }}
                                    >
                                        <ListItemIcon>
                                            <Psychology color="primary" />
                                        </ListItemIcon>
                                        <ListItemText 
                                            primary="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ"
                                            secondary="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã —É—Å—Ç–∞–ª–æ—Å—Ç–∏"
                                        />
                                    </ListItem>
                                )}

                                {testHistory.slice(0, 3).map((result, index) => (
                                    <ListItem 
                                        key={result.id}
                                        button 
                                        onClick={() => onOpenTestResult?.(result)}
                                        sx={{ borderRadius: 2, mb: 1 }}
                                    >
                                        <ListItemIcon>
                                            <History color="action" />
                                        </ListItemIcon>
                                        <ListItemText 
                                            primary={`–¢–µ—Å—Ç –æ—Ç ${new Intl.DateTimeFormat('ru-RU', {
                                                day: 'numeric',
                                                month: 'short',
                                                hour: '2-digit',
                                                minute: '2-digit'
                                            }).format(new Date(result.completedAt))}`}
                                            secondary={
                                                result.dominantTypes.length > 0 
                                                    ? `–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ç–∏–ø—ã: ${result.dominantTypes.slice(0, 2).map(t => t.name).join(', ')}`
                                                    : '–ë–µ–∑ –∑–Ω–∞—á–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —É—Å—Ç–∞–ª–æ—Å—Ç–∏'
                                            }
                                        />
                                        {result.dominantTypes.length > 0 && (
                                            <CheckCircle color="success" />
                                        )}
                                    </ListItem>
                                ))}

                                {testHistory.length > 3 && (
                                    <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
                                        –ò –µ—â–µ {testHistory.length - 3} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...
                                    </Typography>
                                )}
                            </List>
                        </CardContent>
                    </Card>
                )}

                {/* PWA —Ñ—É–Ω–∫—Ü–∏–∏ */}
                <Card sx={{ mb: 2 }}>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                        </Typography>
                        <PWAInstall />
                    </CardContent>
                </Card>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ */}
                <Card>
                    <CardContent>
                        <Typography variant="h6" sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 1 }}>
                            <Info color="primary" />
                            –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
                        </Typography>
                        
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            <strong>–¢—Ä–µ–∫–µ—Ä –æ—Ç–¥—ã—Ö–∞</strong> v1.0.0 (PWA)
                        </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –æ—Ç–¥—ã—Ö–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é.
                        </Typography>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 1 }}>
                            –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                            ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω | ‚úÖ –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ | ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                        </Typography>
                    </CardContent>
                </Card>
            </Box>

            {/* –î–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
            <Dialog open={exportDialogOpen} onClose={() => setExportDialogOpen(false)}>
                <DialogTitle>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</DialogTitle>
                <DialogContent>
                    <Typography variant="body2" sx={{ mb: 2 }}>
                        –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
                    </Typography>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setExportDialogOpen(false)}>
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button onClick={handleExportData} variant="contained">
                        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                </DialogActions>
            </Dialog>

            {/* –î–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ */}
            <Dialog open={importDialogOpen} onClose={() => setImportDialogOpen(false)} maxWidth="sm" fullWidth>
                <DialogTitle>–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</DialogTitle>
                <DialogContent>
                    <Typography variant="body2" sx={{ mb: 2 }}>
                        –í—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:
                    </Typography>
                    <TextField
                        multiline
                        rows={6}
                        fullWidth
                        value={importData}
                        onChange={(e) => setImportData(e.target.value)}
                        placeholder="–í—Å—Ç–∞–≤—å—Ç–µ JSON-–¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å..."
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setImportDialogOpen(false)}>
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button 
                        onClick={handleImportData} 
                        variant="contained"
                        disabled={!importData.trim()}
                    >
                        –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                </DialogActions>
            </Dialog>

            {/* –î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö */}
            <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>
                <DialogTitle>–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?</DialogTitle>
                <DialogContent>
                    <Typography variant="body2" color="error">
                        –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ! –í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã.
                    </Typography>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setDeleteDialogOpen(false)}>
                        –û—Ç–º–µ–Ω–∞
                    </Button>
                    <Button onClick={handleDeleteAllData} color="error" variant="contained">
                        –£–¥–∞–ª–∏—Ç—å –≤—Å–µ
                    </Button>
                </DialogActions>
            </Dialog>
        </Box>
    );
};

export default Settings;
