import React, { useState } from 'react';
import {
    Box,
    Typography,
    Fab,
    Grid,
    Tabs,
    Tab,
    Card,
    CardContent,
    TextField,
    InputAdornment,
    Chip,
    IconButton,
    Menu,
    MenuItem,
    AppBar,
    Toolbar
} from '@mui/material';
import {
    Add,
    Search,
    FilterList,
    Sort
} from '@mui/icons-material';
import { Activity, ActivityType } from '../types';
import ActivityCard from '../components/ActivityCard';
import ActivityForm from '../components/ActivityForm';

interface ActivitiesProps {
    activities: Activity[];
    setActivities: React.Dispatch<React.SetStateAction<Activity[]>>;
}

const Activities: React.FC<ActivitiesProps> = ({ activities, setActivities }) => {
    const [isFormOpen, setIsFormOpen] = useState(false);
    const [editingActivity, setEditingActivity] = useState<Activity | undefined>();
    const [activeTab, setActiveTab] = useState(0);
    const [searchQuery, setSearchQuery] = useState('');
    const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
    const [sortAnchorEl, setSortAnchorEl] = useState<null | HTMLElement>(null);
    const [selectedTypes, setSelectedTypes] = useState<ActivityType[]>([]);
    const [sortBy, setSortBy] = useState<'name' | 'created' | 'completed'>('created');

    const handleCompleteActivity = (activityId: string) => {
        setActivities(prev => prev.map(activity => 
            activity.id === activityId 
                ? {
                    ...activity,
                    completedDates: [...activity.completedDates, new Date()]
                }
                : activity
        ));
    };

    const handleEditActivity = (activity: Activity) => {
        setEditingActivity(activity);
        setIsFormOpen(true);
    };

    const handleDeleteActivity = (activityId: string) => {
        setActivities(prev => prev.filter(activity => activity.id !== activityId));
    };

    const handleAddActivity = (newActivity: Activity) => {
        if (editingActivity) {
            setActivities(prev => prev.map(activity => 
                activity.id === editingActivity.id ? newActivity : activity
            ));
        } else {
            setActivities(prev => [...prev, newActivity]);
        }
        setEditingActivity(undefined);
    };

    const handleCloseForm = () => {
        setIsFormOpen(false);
        setEditingActivity(undefined);
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const getFilteredActivities = () => {
        let filtered = activities.filter(activity => {
            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É (–∞–∫—Ç–∏–≤–Ω—ã–µ/–∞—Ä—Ö–∏–≤–Ω—ã–µ)
            if (activeTab === 0 && !activity.isActive) return false;
            if (activeTab === 1 && activity.isActive) return false;
            
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
            if (searchQuery) {
                const query = searchQuery.toLowerCase();
                const matchesName = activity.name.toLowerCase().includes(query);
                const matchesDescription = activity.description?.toLowerCase().includes(query);
                if (!matchesName && !matchesDescription) return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º
            if (selectedTypes.length > 0 && !selectedTypes.includes(activity.type)) {
                return false;
            }
            
            return true;
        });

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        filtered.sort((a, b) => {
            switch (sortBy) {
                case 'name':
                    return a.name.localeCompare(b.name);
                case 'created':
                    return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
                case 'completed':
                    const aLastCompleted = a.completedDates.length > 0 ? 
                        Math.max(...a.completedDates.map(d => new Date(d).getTime())) : 0;
                    const bLastCompleted = b.completedDates.length > 0 ? 
                        Math.max(...b.completedDates.map(d => new Date(d).getTime())) : 0;
                    return bLastCompleted - aLastCompleted;
                default:
                    return 0;
            }
        });

        return filtered;
    };

    const filteredActivities = getFilteredActivities();
    const activeActivities = activities.filter(a => a.isActive);
    const archivedActivities = activities.filter(a => !a.isActive);

    const activityTypeLabels = {
        [ActivityType.PHYSICAL]: '–§–∏–∑–∏—á–µ—Å–∫–∞—è',
        [ActivityType.MENTAL]: '–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è',
        [ActivityType.SOCIAL]: '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è',
        [ActivityType.CREATIVE]: '–¢–≤–æ—Ä—á–µ—Å–∫–∞—è',
        [ActivityType.OUTDOOR]: '–ù–∞ –≤–æ–∑–¥—É—Ö–µ',
        [ActivityType.PASSIVE]: '–ü–∞—Å—Å–∏–≤–Ω–∞—è'
    };

    const toggleTypeFilter = (type: ActivityType) => {
        setSelectedTypes(prev => 
            prev.includes(type) 
                ? prev.filter(t => t !== type)
                : [...prev, type]
        );
    };

    return (
        <Box sx={{ pb: 10 }}>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–∏—Å–∫–æ–º */}
            <AppBar 
                position="sticky" 
                color="transparent" 
                elevation={0}
                sx={{ 
                    backdropFilter: 'blur(8px)',
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                    borderBottom: '1px solid rgba(0, 0, 0, 0.12)'
                }}
            >
                <Toolbar sx={{ flexDirection: 'column', alignItems: 'stretch', py: 2 }}>
                    <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                        <Typography variant="h5" component="h1" sx={{ fontWeight: 700, color: 'text.primary' }}>
                            –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        </Typography>
                        <Box>
                            <IconButton 
                                onClick={(e) => setFilterAnchorEl(e.currentTarget)}
                                color={selectedTypes.length > 0 ? 'primary' : 'default'}
                            >
                                <FilterList />
                            </IconButton>
                            <IconButton onClick={(e) => setSortAnchorEl(e.currentTarget)}>
                                <Sort />
                            </IconButton>
                        </Box>
                    </Box>
                    
                    <TextField
                        placeholder="–ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        size="small"
                        fullWidth
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <Search color="action" />
                                </InputAdornment>
                            ),
                            sx: { borderRadius: '12px' }
                        }}
                    />
                </Toolbar>
            </AppBar>

            <Box sx={{ px: 2 }}>
                {/* –í–∫–ª–∞–¥–∫–∏ */}
                <Tabs
                    value={activeTab}
                    onChange={(_, newValue) => setActiveTab(newValue)}
                    sx={{ mb: 3 }}
                    variant="fullWidth"
                >
                    <Tab label={`–ê–∫—Ç–∏–≤–Ω—ã–µ (${activeActivities.length})`} />
                    <Tab label={`–ê—Ä—Ö–∏–≤ (${archivedActivities.length})`} />
                </Tabs>

                {/* –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º */}
                {selectedTypes.length > 0 && (
                    <Box sx={{ mb: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                        {selectedTypes.map(type => (
                            <Chip
                                key={type}
                                label={activityTypeLabels[type]}
                                onDelete={() => toggleTypeFilter(type)}
                                color="primary"
                                size="small"
                            />
                        ))}
                    </Box>
                )}

                {/* –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π */}
                {filteredActivities.length > 0 ? (
                    <Grid container spacing={2}>
                        {filteredActivities.map(activity => (
                            <Grid item xs={12} key={activity.id}>
                                <ActivityCard 
                                    activity={activity}
                                    onComplete={handleCompleteActivity}
                                    onEdit={handleEditActivity}
                                    onDelete={handleDeleteActivity}
                                />
                            </Grid>
                        ))}
                    </Grid>
                ) : (
                    <Card sx={{ textAlign: 'center', py: 6 }}>
                        <CardContent>
                            <Typography variant="h6" sx={{ mb: 2 }}>
                                {activeTab === 0 ? 'üéØ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π' : 'üì¶ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç'}
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                                {activeTab === 0 
                                    ? '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥—ã—Ö–∞'
                                    : '–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
                                }
                            </Typography>
                        </CardContent>
                    </Card>
                )}
            </Box>

            {/* FAB –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <Fab
                color="primary"
                aria-label="add"
                onClick={() => setIsFormOpen(true)}
                sx={{
                    position: 'fixed',
                    bottom: 90,
                    right: 16,
                    zIndex: 1000
                }}
            >
                <Add />
            </Fab>

            {/* –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
            <Menu
                anchorEl={filterAnchorEl}
                open={Boolean(filterAnchorEl)}
                onClose={() => setFilterAnchorEl(null)}
            >
                <MenuItem sx={{ fontWeight: 600, fontSize: '0.875rem' }}>
                    –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø–∞–º:
                </MenuItem>
                {Object.entries(activityTypeLabels).map(([type, label]) => (
                    <MenuItem 
                        key={type}
                        onClick={() => toggleTypeFilter(type as ActivityType)}
                        sx={{ pl: 3 }}
                    >
                        <Chip
                            label={label}
                            size="small"
                            color={selectedTypes.includes(type as ActivityType) ? 'primary' : 'default'}
                            variant={selectedTypes.includes(type as ActivityType) ? 'filled' : 'outlined'}
                        />
                    </MenuItem>
                ))}
            </Menu>

            {/* –ú–µ–Ω—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
            <Menu
                anchorEl={sortAnchorEl}
                open={Boolean(sortAnchorEl)}
                onClose={() => setSortAnchorEl(null)}
            >
                <MenuItem onClick={() => { setSortBy('created'); setSortAnchorEl(null); }}>
                    –ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                </MenuItem>
                <MenuItem onClick={() => { setSortBy('name'); setSortAnchorEl(null); }}>
                    –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                </MenuItem>
                <MenuItem onClick={() => { setSortBy('completed'); setSortAnchorEl(null); }}>
                    –ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
                </MenuItem>
            </Menu>

            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
            <ActivityForm 
                open={isFormOpen}
                onClose={handleCloseForm}
                onSubmit={handleAddActivity}
                editActivity={editingActivity}
            />
        </Box>
    );
};

export default Activities;